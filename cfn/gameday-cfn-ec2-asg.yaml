---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  PublicSubnetID:
    Description: 'The IDs of the public subnet to be used for the ALB'
    Type: AWS::EC2::Subnet::Id
  VPCId:
    Description: 'The VPC ID to be used for deployment'
    Type: AWS::EC2::VPC::Id

Resources:
  ## Resources for Presentation Layer
  # ALB/ASG/EC2
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: gameday-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref MyALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnetID
  
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref MyALBTG
          Type: forward
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Name: gameday-tg
      Port: 80
      Protocol: HTTP
      ProtocolVersion: String
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: String

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: 
          Ref: "AWS::Region"
      LaunchConfigurationName:
        Ref: LaunchConfig
      DesiredCapacity: '3'
      MinSize: '1'
      MaxSize: '4'
      TargetGroupARNs:
      - !Ref MyALBTG
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M
  
  ASGScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref AutoScalingGroup
      EstimatedInstanceWarmup: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: ASGAverageCPUUtilization

  LaunchConfig:
    DependsOn: apiGateway
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [EC2AmiIds, !Ref AWS::Region, "ImageId"]
      InstanceType: t2.micro
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install httpd -y
          sudo yum install git -y
          sudo git clone https://github.com/ivanbok/gameday-serverless-app.git
          sudo cp -a ./gameday-serverless-app/. /var/www/html
          sudo sed 's/replacethiswiththeapiurl/${apiGateway}/g' /var/www/html/js/load-template.js > /var/www/html/js/load.js
          sudo systemctl start httpd
          sudo systemctl enable httpd
      SecurityGroups: 
      - !Ref MyEC2SecurityGroup

  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow SSH and HTTP'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      - SourceSecurityGroupId: !Ref MyALBSecurityGroup
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp

  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP from internet'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp

  ## Create Lambda Functions and Associated IAM Resources
  # Create Lambda Execution Role that allows it to call DynamoDB
  LambdaDDBExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "s3:*"
            Resource: "*"
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "*"
      - PolicyName: AmazonDynamoDBFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - dynamodb:*
            - dax:*
            - application-autoscaling:DeleteScalingPolicy
            - application-autoscaling:DeregisterScalableTarget
            - application-autoscaling:DescribeScalableTargets
            - application-autoscaling:DescribeScalingActivities
            - application-autoscaling:DescribeScalingPolicies
            - application-autoscaling:PutScalingPolicy
            - application-autoscaling:RegisterScalableTarget
            - cloudwatch:DeleteAlarms
            - cloudwatch:DescribeAlarmHistory
            - cloudwatch:DescribeAlarms
            - cloudwatch:DescribeAlarmsForMetric
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - cloudwatch:PutMetricAlarm
            - cloudwatch:GetMetricData
            - datapipeline:ActivatePipeline
            - datapipeline:CreatePipeline
            - datapipeline:DeletePipeline
            - datapipeline:DescribeObjects
            - datapipeline:DescribePipelines
            - datapipeline:GetPipelineDefinition
            - datapipeline:ListPipelines
            - datapipeline:PutPipelineDefinition
            - datapipeline:QueryObjects
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            - iam:GetRole
            - iam:ListRoles
            - kms:DescribeKey
            - kms:ListAliases
            - sns:CreateTopic
            - sns:DeleteTopic
            - sns:ListSubscriptions
            - sns:ListSubscriptionsByTopic
            - sns:ListTopics
            - sns:Subscribe
            - sns:Unsubscribe
            - sns:SetTopicAttributes
            - lambda:CreateFunction
            - lambda:ListFunctions
            - lambda:ListEventSourceMappings
            - lambda:CreateEventSourceMapping
            - lambda:DeleteEventSourceMapping
            - lambda:GetFunctionConfiguration
            - lambda:DeleteFunction
            - resource-groups:ListGroups
            - resource-groups:ListGroupResources
            - resource-groups:GetGroup
            - resource-groups:GetGroupQuery
            - resource-groups:DeleteGroup
            - resource-groups:CreateGroup
            - tag:GetResources
            - kinesis:ListStreams
            - kinesis:DescribeStream
            - kinesis:DescribeStreamSummary
            Effect: Allow
            Resource: "*"
          - Action: cloudwatch:GetInsightRuleReport
            Effect: Allow
            Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
          - Action:
            - iam:PassRole
            Effect: Allow
            Resource: "*"
            Condition:
              StringLike:
                iam:PassedToService:
                - application-autoscaling.amazonaws.com
                - application-autoscaling.amazonaws.com.cn
                - dax.amazonaws.com
          - Effect: Allow
            Action:
            - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName:
                - replication.dynamodb.amazonaws.com
                - dax.amazonaws.com
                - dynamodb.application-autoscaling.amazonaws.com
                - contributorinsights.dynamodb.amazonaws.com
                - kinesisreplication.dynamodb.amazonaws.com

  # Create Lambda Function to List Races
  ListRacesLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.handler"
      FunctionName: "listraces"
      Role: 
        Fn::GetAtt: 
          - "LambdaDDBExecutionRole"
          - "Arn"
      Runtime: "python3.9"
      Code: 
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key, Attr

          client = boto3.client('dynamodb')

          def handler(event, context):
            country = event["queryStringParameters"]["country"]
            starttime = event["queryStringParameters"]["starttime"]
            endtime = event["queryStringParameters"]["endtime"]
            
            data = client.query(
              TableName='racingresults',
              KeyConditionExpression='country = :country AND #dt BETWEEN :date1 AND :date2',
              ExpressionAttributeValues={
                ':country': {
                  'S': country
                },
                ':date1': {
                  'N': starttime
                },
                ':date2': {
                  'N': endtime
                },
              },
              ExpressionAttributeNames={
                "#dt": "datetime"}
            )
            
            if data["Count"] == 0:
              body = json.dumps({})
            else:
              races = []
              for item in data["Items"]:
                  races.append({"country": item["country"]["S"], "datetime": item["datetime"]["N"]})
              body = json.dumps(races)

            response = {
                'statusCode': 200,
                'body': body,
                'headers': {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
            }
            
            return response
  # Create Lambda Permissions Policy for API Gateway to Invoke it
  ListRacesLambdaAPIGatewayResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListRacesLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/listraces

  # Create Lambda Function to get Results of a Given Race
  RacingResultsLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.handler"
      FunctionName: "racing-results"
      Role: 
        Fn::GetAtt: 
          - "LambdaDDBExecutionRole"
          - "Arn"
      Runtime: "python3.9"
      Code: 
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key, Attr

          client = boto3.client('dynamodb')

          def handler(event, context):
            country = event["queryStringParameters"]["country"]
            date_time = event["queryStringParameters"]["datetime"]
            
            data = client.query(
              TableName='racingresults',
              KeyConditionExpression='country = :country AND #dt = :date_time',
              ExpressionAttributeValues={
                ':country': {
                  'S': country
                },
                ':date_time': {
                  'N': date_time
                },
              },
              ExpressionAttributeNames={
                "#dt": "datetime"}
            )
            
            if data["Count"] == 0:
              body = json.dumps()
            else:
              # body = json.dumps(data)
              num_racers = int(len(data["Items"][0])-2)
              body_list = []
              for i in range(1,num_racers+1):
                body_list.append(winnerstrtodict(data["Items"][0][str(i)]["S"]))
              body = json.dumps(body_list)
              # body = data["Items"][0]["1"]["S"]
            
            response = {
                'statusCode': 200,
                'body': body,
                'headers': {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
            }
            
            return response

          def winnerstrtodict(stringinput):
            arr = stringinput.split(",")
            dictoutput = {"position": arr[0], "driver": arr[1], "team": arr[2], "points": arr[3]}
            return dictoutput
  # Create Lambda Permissions Policy for API Gateway to Invoke it
  RacingResultsLambdaAPIGatewayResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RacingResultsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/raceresults

  # Create Lambda Function to Generate Mock Racing Data
  GenerateRacingDataLambda: 
    DependsOn: RacingResultsTable
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.handler"
      FunctionName: "generateracingdata"
      Role: 
        Fn::GetAtt: 
          - "LambdaDDBExecutionRole"
          - "Arn"
      Runtime: "python3.9"
      Code: 
        ZipFile: |
          import json
          import math
          import random
          import datetime

          import boto3

          client = boto3.client('dynamodb')

          def handler(event, context):
              datetimelist = range(20220601,20220610)
              for date_time in datetimelist:
                  generateresults("singapore", date_time)
                  generateresults("australia", date_time)
                  generateresults("new zealand", date_time)
                  generateresults("thailand", date_time)

              response = {
                  'statusCode': 200,
                  'body': 'successfully created item!',
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
              }
              return response

          def generateresults(country, date_time):
              # Generate Results
              results = generatewinnerlist()
              
              #################################
              ## Build item ###################
              #################################
              
              # Get current datetime and convert to int
              now = datetime.datetime.now()
              dt_string = str(date_time) + "1200"

              # Begin building item    
              item = {"country": {'S': country}, "datetime": {'N': dt_string}}
              
              # Load racers
              count = 1
              for row in results:
                  # Each row entry will take the format of "rank,driver,team,score"
                  # For example: "1,Max Verstappen,Red Bull,125"
                  row_string = str(count) + ',' + row["driver"] + "," + row["team"] + "," + str(row["score"])
                  item[str(count)] = {'S': row_string}
                  count += 1
              
              data = client.put_item(
                  TableName='racingresults',
                  Item=item)

          def generatewinnerlist():
              driverlist = [{"driver": "Max Verstappen", "team": "Red Bull"},\
                  {"driver": "Pierre Gasly", "team": "Alpha Tauri"},\
                  {"driver": "Sergio Perez", "team": "Red Bull"},\
                  {"driver": "Felipe Nasr", "team": "Sauber-Ferrari"},\
                  {"driver": "Fernando Alonso", "team": "Alpine"},\
                  {"driver": "Charles Leclerc", "team": "Ferrari"},\
                  {"driver": "Lance Stroll", "team": "Aston Martin"},\
                  {"driver": "Stoffel Vandoorne", "team": "McLaren"},\
                  {"driver": "Kevin Magnussen", "team": "Haas"},\
                  {"driver": "Esteban Gutierrez", "team": "Haas"},\
                  {"driver": "Yuki Tsunoda", "team": "Alpha Tauri"},\
                  {"driver": "Alexander Albon", "team": "Williams"},\
                  {"driver": "Guanyu Zhou", "team": "Alfa Romeo"},\
                  {"driver": "Daniil Kvyat", "team": "Alpha Tauri"},\
                  {"driver": "Daniel Ricciardo", "team": "McLaren"}]
              
              for driver in driverlist:
                  driver["score"] = random.randint(0,150)
              
              sortedList = sorted(driverlist, key = lambda i: i['score'],reverse=True)
              results = sortedList[0:10]
              return results

  # Create Main DynamoDB Table
  RacingResultsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "country"
          AttributeType: "S"
        - 
          AttributeName: "datetime"
          AttributeType: "N"
      BillingMode: PROVISIONED
      KeySchema: 
        - 
          AttributeName: "country"
          KeyType: "HASH"
        - 
          AttributeName: "datetime"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "racingresults"

  ## Create API Gateway and associated IAM Resources
  # Create API
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: RacingResultsAPI

  # Create List Races Resource
  ApiGatewayListRacesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: 'listraces'
      RestApiId: !Ref apiGateway
  # Create List Races Method
  # Still requires CORS configuration and query string parameters
  apiGatewayListRacesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListRacesLambdaARN}/invocations
          - ListRacesLambdaARN: !GetAtt ListRacesLambda.Arn
      ResourceId: !Ref ApiGatewayListRacesResource
      RestApiId: !Ref apiGateway
  
  # Set CORS configuration for OPTIONS Preflight Method for Listrace API call 
  apiGatewayListRacesCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayListRacesResource
      RestApiId: !Ref apiGateway
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Create Race Results Resource
  ApiGatewayRaceResultsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: 'raceresults'
      RestApiId: !Ref apiGateway
  # Create Get Race Results Method
  # Still requires query string parameters
  apiGatewayGetRaceResultMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RaceResultsLambdaARN}/invocations
          - RaceResultsLambdaARN: !GetAtt RacingResultsLambda.Arn
      ResourceId: !Ref ApiGatewayRaceResultsResource
      RestApiId: !Ref apiGateway
  
  # Set CORS configuration for OPTIONS Preflight Method for Race Results
  apiGatewayGetRaceResultCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: ApiGatewayRaceResultsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Create Deployment
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayListRacesMethod
      - apiGatewayGetRaceResultMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: prod

  # Create Custom Resource to Invoke Lambda Function for Injecting Data to DynamoDB
  LambdaInvoker:
    DependsOn: GenerateRacingDataLambda
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeGenerateRacingDataLambda
      Description: 'Lambda invoke wrapper for Custom CFN actions'
      Code:
        ZipFile: !Sub |
          import boto3, json
          import cfnresponse

          def handler(event, context):
              print('EVENT:')
              print(event)

              if event['RequestType'] == "Create":
                lambda_client = boto3.client('lambda')
                  
                cfn_event = {}

                lambda_client.invoke(
                    FunctionName='generateracingdata',
                    InvocationType='Event',
                    Payload=json.dumps(cfn_event)
                )

              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                responseData, 'scm-cfn-customresource-id')

      Handler: index.handler
      Role: 
        Fn::GetAtt: 
        - "LambdaCustomResourceRole"
        - "Arn"
      Runtime: python3.9
      Timeout: 5
  
  LambdaCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "s3:*"
            Resource: "*"
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "*"
      - PolicyName: CustomLambdaFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:*
            Effect: Allow
            Resource: "*"
          - Action:
            - iam:PassRole
            Effect: Allow
            Resource: "*"
            Condition:
              StringLike:
                iam:PassedToService:
                - application-autoscaling.amazonaws.com
                - application-autoscaling.amazonaws.com.cn
                - dax.amazonaws.com
          - Effect: Allow
            Action:
            - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName:
                - replication.dynamodb.amazonaws.com
                - dax.amazonaws.com
                - dynamodb.application-autoscaling.amazonaws.com
                - contributorinsights.dynamodb.amazonaws.com
                - kinesisreplication.dynamodb.amazonaws.com

  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LambdaInvoker
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaInvoker.Arn

Mappings:
  EC2AmiIds:
    ap-southeast-1:
      "ImageId": ami-0dc5785603ad4ff54
    ap-southeast-2:
      "ImageId": ami-0bd2230cfb28832f7
    ap-northeast-1:
      "ImageId": ami-0218d08a1f9dac831